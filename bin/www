#!/usr/bin/env node

/**
 * Module dependencies.
 */

var appLoader = require('../app');
var debug = require('debug')('DivineComedySite:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var key = fs.readFileSync(__dirname + '/dcserver-key.pem');
var cert = fs.readFileSync(__dirname + '/dcserver-cert.pem');
var MongoClient = require('mongodb').MongoClient;
var mongoURL = 'mongodb://127.0.0.1:27017/tickets';//apparently there's a node bug where you have to specify the home address instead of 'localhost'

MongoClient.connect(mongoURL, function(err, db) {
  if (err) {
    console.log('Failure to connect to database. Exiting.');
    process.exit(0);
  }//else

  var app = appLoader(db);

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort('80');
  var securePort = normalizePort('443');
  app.set('securePort', securePort);
  app.set('port', port);


  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  var serverOptions = {
    key: key,
    cert: cert
  };

  var secureServer = https.createServer(serverOptions, app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  secureServer.listen(securePort);
  secureServer.on('error', onError);
  secureServer.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {

    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log("Server running on IP 52.24.221.243:" + addr.port);
  }
});